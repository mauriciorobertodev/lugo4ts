// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "server.proto" (package "lugo", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import { Game } from "./server.js";
import type { JoinRequest, GameSnapshot, OrderSet, OrderResponse } from "./server.js";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service provided by the game service to the players (clients).
 *
 * @generated from protobuf service lugo.Game
 */
export interface IGameClient {
    /**
     * JoinATeam allows the player to listen the server during the match.
     *
     * @generated from protobuf rpc: JoinATeam
     */
    joinATeam(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, GameSnapshot>;
    /**
     * SendOrders allows the player to send others to the server when the game is on listening state.
     *
     * @generated from protobuf rpc: SendOrders
     */
    sendOrders(input: OrderSet, options?: RpcOptions): UnaryCall<OrderSet, OrderResponse>;
}
/**
 * Service provided by the game service to the players (clients).
 *
 * @generated from protobuf service lugo.Game
 */
export class GameClient implements IGameClient, ServiceInfo {
    typeName = Game.typeName;
    methods = Game.methods;
    options = Game.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * JoinATeam allows the player to listen the server during the match.
     *
     * @generated from protobuf rpc: JoinATeam
     */
    joinATeam(input: JoinRequest, options?: RpcOptions): ServerStreamingCall<JoinRequest, GameSnapshot> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRequest, GameSnapshot>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * SendOrders allows the player to send others to the server when the game is on listening state.
     *
     * @generated from protobuf rpc: SendOrders
     */
    sendOrders(input: OrderSet, options?: RpcOptions): UnaryCall<OrderSet, OrderResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<OrderSet, OrderResponse>("unary", this._transport, method, opt, input);
    }
}
