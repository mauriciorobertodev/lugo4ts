// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "remote.proto" (package "lugo", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PauseResumeRequest, GameSnapshotResponse,
    GameSnapshotRequest,
    ResetPlayerPositionsResponse,
    ResetPlayerPositionsRequest,
    ResumeListeningResponse,
    ResumeListeningRequest,
    GameProperties,
    PlayerProperties,
    BallProperties,
    NextOrderRequest,
    NextTurnRequest,
    CommandResponse
 } from "./remote.js";
import { Remote } from "./remote.js"; 
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The game server implements a Remote service that allows you to control the game flow.
 * This service may help you to control or watch the game during training sessions.
 * The game server only offers this service on debug mode on.
 *
 * @generated from protobuf service lugo.Remote
 */
export interface IRemoteClient {
    /**
     * @generated from protobuf rpc: PauseOrResume
     */
    pauseOrResume(input: PauseResumeRequest, options?: RpcOptions): UnaryCall<PauseResumeRequest, CommandResponse>;
    /**
     * @generated from protobuf rpc: NextTurn
     */
    nextTurn(input: NextTurnRequest, options?: RpcOptions): UnaryCall<NextTurnRequest, CommandResponse>;
    /**
     * @generated from protobuf rpc: NextOrder
     */
    nextOrder(input: NextOrderRequest, options?: RpcOptions): UnaryCall<NextOrderRequest, CommandResponse>;
    /**
     * @generated from protobuf rpc: SetBallProperties
     */
    setBallProperties(input: BallProperties, options?: RpcOptions): UnaryCall<BallProperties, CommandResponse>;
    /**
     * @generated from protobuf rpc: SetPlayerProperties
     */
    setPlayerProperties(input: PlayerProperties, options?: RpcOptions): UnaryCall<PlayerProperties, CommandResponse>;
    /**
     * @generated from protobuf rpc: SetGameProperties
     */
    setGameProperties(input: GameProperties, options?: RpcOptions): UnaryCall<GameProperties, CommandResponse>;
    /**
     * @generated from protobuf rpc: ResumeListeningPhase
     */
    resumeListeningPhase(input: ResumeListeningRequest, options?: RpcOptions): UnaryCall<ResumeListeningRequest, ResumeListeningResponse>;
    /**
     * @generated from protobuf rpc: ResetPlayerPositions
     */
    resetPlayerPositions(input: ResetPlayerPositionsRequest, options?: RpcOptions): UnaryCall<ResetPlayerPositionsRequest, ResetPlayerPositionsResponse>;
    /**
     * @generated from protobuf rpc: GetGameSnapshot
     */
    getGameSnapshot(input: GameSnapshotRequest, options?: RpcOptions): UnaryCall<GameSnapshotRequest, GameSnapshotResponse>;
}
/**
 * The game server implements a Remote service that allows you to control the game flow.
 * This service may help you to control or watch the game during training sessions.
 * The game server only offers this service on debug mode on.
 *
 * @generated from protobuf service lugo.Remote
 */
export class RemoteClient implements IRemoteClient, ServiceInfo {
    typeName = Remote.typeName;
    methods = Remote.methods;
    options = Remote.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PauseOrResume
     */
    pauseOrResume(input: PauseResumeRequest, options?: RpcOptions): UnaryCall<PauseResumeRequest, CommandResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PauseResumeRequest, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NextTurn
     */
    nextTurn(input: NextTurnRequest, options?: RpcOptions): UnaryCall<NextTurnRequest, CommandResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<NextTurnRequest, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NextOrder
     */
    nextOrder(input: NextOrderRequest, options?: RpcOptions): UnaryCall<NextOrderRequest, CommandResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<NextOrderRequest, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetBallProperties
     */
    setBallProperties(input: BallProperties, options?: RpcOptions): UnaryCall<BallProperties, CommandResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<BallProperties, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPlayerProperties
     */
    setPlayerProperties(input: PlayerProperties, options?: RpcOptions): UnaryCall<PlayerProperties, CommandResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayerProperties, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetGameProperties
     */
    setGameProperties(input: GameProperties, options?: RpcOptions): UnaryCall<GameProperties, CommandResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GameProperties, CommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResumeListeningPhase
     */
    resumeListeningPhase(input: ResumeListeningRequest, options?: RpcOptions): UnaryCall<ResumeListeningRequest, ResumeListeningResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResumeListeningRequest, ResumeListeningResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetPlayerPositions
     */
    resetPlayerPositions(input: ResetPlayerPositionsRequest, options?: RpcOptions): UnaryCall<ResetPlayerPositionsRequest, ResetPlayerPositionsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetPlayerPositionsRequest, ResetPlayerPositionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGameSnapshot
     */
    getGameSnapshot(input: GameSnapshotRequest, options?: RpcOptions): UnaryCall<GameSnapshotRequest, GameSnapshotResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GameSnapshotRequest, GameSnapshotResponse>("unary", this._transport, method, opt, input);
    }
}
