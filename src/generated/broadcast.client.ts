// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "broadcast.proto" (package "lugo", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Broadcast } from "./broadcast.js";
import type { StartRequest } from "./broadcast.js";
import type { GameSetup } from "./broadcast.js";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GameEvent } from "./broadcast.js";
import type { WatcherRequest } from "./broadcast.js";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service to be consumed by clients (e.g. frontend, app, etc) to watch the match.
 * The game server implements a Broadcast service. This service may help you to control or watch the game during
 * training sessions.
 *
 * @generated from protobuf service lugo.Broadcast
 */
export interface IBroadcastClient {
    /**
     * Keep an open stream that publish all important events in the match.
     *
     * @generated from protobuf rpc: OnEvent
     */
    onEvent(input: WatcherRequest, options?: RpcOptions): ServerStreamingCall<WatcherRequest, GameEvent>;
    /**
     * Returns the game setup configuration.
     *
     * @generated from protobuf rpc: GetGameSetup
     */
    getGameSetup(input: WatcherRequest, options?: RpcOptions): UnaryCall<WatcherRequest, GameSetup>;
    /**
     * StartGame allows the master watcher to start the match.
     * See the Game Server starting mode to understand how it works.
     *
     * @generated from protobuf rpc: StartGame
     */
    startGame(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, GameSetup>;
}
/**
 * Service to be consumed by clients (e.g. frontend, app, etc) to watch the match.
 * The game server implements a Broadcast service. This service may help you to control or watch the game during
 * training sessions.
 *
 * @generated from protobuf service lugo.Broadcast
 */
export class BroadcastClient implements IBroadcastClient, ServiceInfo {
    typeName = Broadcast.typeName;
    methods = Broadcast.methods;
    options = Broadcast.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Keep an open stream that publish all important events in the match.
     *
     * @generated from protobuf rpc: OnEvent
     */
    onEvent(input: WatcherRequest, options?: RpcOptions): ServerStreamingCall<WatcherRequest, GameEvent> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<WatcherRequest, GameEvent>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Returns the game setup configuration.
     *
     * @generated from protobuf rpc: GetGameSetup
     */
    getGameSetup(input: WatcherRequest, options?: RpcOptions): UnaryCall<WatcherRequest, GameSetup> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<WatcherRequest, GameSetup>("unary", this._transport, method, opt, input);
    }
    /**
     * StartGame allows the master watcher to start the match.
     * See the Game Server starting mode to understand how it works.
     *
     * @generated from protobuf rpc: StartGame
     */
    startGame(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, GameSetup> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, GameSetup>("unary", this._transport, method, opt, input);
    }
}
