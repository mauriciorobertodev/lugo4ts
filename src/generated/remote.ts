// @generated by protobuf-ts 2.11.0
// @generated from protobuf file "remote.proto" (package "lugo", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ShotClock, Team_Side, Player, GameSnapshot } from "./server.js";
import { Point, Velocity, } from "./physics.js";
/**
 * @generated from protobuf message lugo.PauseResumeRequest
 */
export interface PauseResumeRequest {
}
/**
 * @generated from protobuf message lugo.NextTurnRequest
 */
export interface NextTurnRequest {
}
/**
 * @generated from protobuf message lugo.NextOrderRequest
 */
export interface NextOrderRequest {
}
/**
 * @generated from protobuf message lugo.BallProperties
 */
export interface BallProperties {
    /**
     * @generated from protobuf field: lugo.Point position = 1
     */
    position?: Point;
    /**
     * @generated from protobuf field: lugo.Velocity velocity = 2
     */
    velocity?: Velocity;
    /**
     * @generated from protobuf field: lugo.Player holder = 3
     */
    holder?: Player;
}
/**
 * @generated from protobuf message lugo.PlayerProperties
 */
export interface PlayerProperties {
    /**
     * @generated from protobuf field: lugo.Team.Side side = 1
     */
    side: Team_Side;
    /**
     * @generated from protobuf field: uint32 number = 2
     */
    number: number;
    /**
     * @generated from protobuf field: lugo.Point position = 3
     */
    position?: Point;
    /**
     * @generated from protobuf field: lugo.Velocity velocity = 4
     */
    velocity?: Velocity;
}
/**
 * @generated from protobuf message lugo.GameProperties
 */
export interface GameProperties {
    /**
     * @generated from protobuf field: uint32 turn = 1
     */
    turn: number;
    /**
     * @generated from protobuf field: uint32 home_score = 2
     */
    homeScore: number;
    /**
     * @generated from protobuf field: uint32 away_score = 3
     */
    awayScore: number;
    /**
     * @generated from protobuf field: int64 frame_interval = 4
     */
    frameInterval: bigint;
    /**
     * @generated from protobuf field: lugo.ShotClock shot_clock = 5
     */
    shotClock?: ShotClock;
}
/**
 * @generated from protobuf message lugo.CommandResponse
 */
export interface CommandResponse {
    /**
     * @generated from protobuf field: lugo.CommandResponse.StatusCode code = 1
     */
    code: CommandResponse_StatusCode;
    /**
     * @generated from protobuf field: lugo.GameSnapshot game_snapshot = 2
     */
    gameSnapshot?: GameSnapshot;
    /**
     * @generated from protobuf field: string details = 3
     */
    details: string;
}
/**
 * @generated from protobuf enum lugo.CommandResponse.StatusCode
 */
export enum CommandResponse_StatusCode {
    /**
     * @generated from protobuf enum value: SUCCESS = 0;
     */
    SUCCESS = 0,
    /**
     * @generated from protobuf enum value: INVALID_VALUE = 1;
     */
    INVALID_VALUE = 1,
    /**
     * @generated from protobuf enum value: DEADLINE_EXCEEDED = 2;
     */
    DEADLINE_EXCEEDED = 2,
    /**
     * @generated from protobuf enum value: OTHER = 99;
     */
    OTHER = 99
}
/**
 * @generated from protobuf message lugo.ResumeListeningRequest
 */
export interface ResumeListeningRequest {
}
/**
 * @generated from protobuf message lugo.ResumeListeningResponse
 */
export interface ResumeListeningResponse {
}
/**
 * @generated from protobuf message lugo.ResetPlayerPositionsRequest
 */
export interface ResetPlayerPositionsRequest {
}
/**
 * @generated from protobuf message lugo.ResetPlayerPositionsResponse
 */
export interface ResetPlayerPositionsResponse {
    /**
     * @generated from protobuf field: lugo.GameSnapshot game_snapshot = 1
     */
    gameSnapshot?: GameSnapshot;
}
/**
 * @generated from protobuf message lugo.GameSnapshotRequest
 */
export interface GameSnapshotRequest {
}
/**
 * @generated from protobuf message lugo.GameSnapshotResponse
 */
export interface GameSnapshotResponse {
    /**
     * @generated from protobuf field: lugo.GameSnapshot game_snapshot = 1
     */
    gameSnapshot?: GameSnapshot;
}
// @generated message type with reflection information, may provide speed optimized methods
class PauseResumeRequest$Type extends MessageType<PauseResumeRequest> {
    constructor() {
        super("lugo.PauseResumeRequest", []);
    }
    create(value?: PartialMessage<PauseResumeRequest>): PauseResumeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PauseResumeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PauseResumeRequest): PauseResumeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PauseResumeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.PauseResumeRequest
 */
export const PauseResumeRequest = new PauseResumeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NextTurnRequest$Type extends MessageType<NextTurnRequest> {
    constructor() {
        super("lugo.NextTurnRequest", []);
    }
    create(value?: PartialMessage<NextTurnRequest>): NextTurnRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NextTurnRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NextTurnRequest): NextTurnRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NextTurnRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.NextTurnRequest
 */
export const NextTurnRequest = new NextTurnRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NextOrderRequest$Type extends MessageType<NextOrderRequest> {
    constructor() {
        super("lugo.NextOrderRequest", []);
    }
    create(value?: PartialMessage<NextOrderRequest>): NextOrderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NextOrderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NextOrderRequest): NextOrderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NextOrderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.NextOrderRequest
 */
export const NextOrderRequest = new NextOrderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BallProperties$Type extends MessageType<BallProperties> {
    constructor() {
        super("lugo.BallProperties", [
            { no: 1, name: "position", kind: "message", T: () => Point },
            { no: 2, name: "velocity", kind: "message", T: () => Velocity },
            { no: 3, name: "holder", kind: "message", T: () => Player }
        ]);
    }
    create(value?: PartialMessage<BallProperties>): BallProperties {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BallProperties>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BallProperties): BallProperties {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lugo.Point position */ 1:
                    message.position = Point.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* lugo.Velocity velocity */ 2:
                    message.velocity = Velocity.internalBinaryRead(reader, reader.uint32(), options, message.velocity);
                    break;
                case /* lugo.Player holder */ 3:
                    message.holder = Player.internalBinaryRead(reader, reader.uint32(), options, message.holder);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BallProperties, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lugo.Point position = 1; */
        if (message.position)
            Point.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* lugo.Velocity velocity = 2; */
        if (message.velocity)
            Velocity.internalBinaryWrite(message.velocity, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* lugo.Player holder = 3; */
        if (message.holder)
            Player.internalBinaryWrite(message.holder, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.BallProperties
 */
export const BallProperties = new BallProperties$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerProperties$Type extends MessageType<PlayerProperties> {
    constructor() {
        super("lugo.PlayerProperties", [
            { no: 1, name: "side", kind: "enum", T: () => ["lugo.Team.Side", Team_Side] },
            { no: 2, name: "number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "position", kind: "message", T: () => Point },
            { no: 4, name: "velocity", kind: "message", T: () => Velocity }
        ]);
    }
    create(value?: PartialMessage<PlayerProperties>): PlayerProperties {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.side = 0;
        message.number = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerProperties>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerProperties): PlayerProperties {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lugo.Team.Side side */ 1:
                    message.side = reader.int32();
                    break;
                case /* uint32 number */ 2:
                    message.number = reader.uint32();
                    break;
                case /* lugo.Point position */ 3:
                    message.position = Point.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* lugo.Velocity velocity */ 4:
                    message.velocity = Velocity.internalBinaryRead(reader, reader.uint32(), options, message.velocity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerProperties, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lugo.Team.Side side = 1; */
        if (message.side !== 0)
            writer.tag(1, WireType.Varint).int32(message.side);
        /* uint32 number = 2; */
        if (message.number !== 0)
            writer.tag(2, WireType.Varint).uint32(message.number);
        /* lugo.Point position = 3; */
        if (message.position)
            Point.internalBinaryWrite(message.position, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* lugo.Velocity velocity = 4; */
        if (message.velocity)
            Velocity.internalBinaryWrite(message.velocity, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.PlayerProperties
 */
export const PlayerProperties = new PlayerProperties$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameProperties$Type extends MessageType<GameProperties> {
    constructor() {
        super("lugo.GameProperties", [
            { no: 1, name: "turn", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "home_score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "away_score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "frame_interval", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "shot_clock", kind: "message", T: () => ShotClock }
        ]);
    }
    create(value?: PartialMessage<GameProperties>): GameProperties {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.turn = 0;
        message.homeScore = 0;
        message.awayScore = 0;
        message.frameInterval = 0n;
        if (value !== undefined)
            reflectionMergePartial<GameProperties>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameProperties): GameProperties {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 turn */ 1:
                    message.turn = reader.uint32();
                    break;
                case /* uint32 home_score */ 2:
                    message.homeScore = reader.uint32();
                    break;
                case /* uint32 away_score */ 3:
                    message.awayScore = reader.uint32();
                    break;
                case /* int64 frame_interval */ 4:
                    message.frameInterval = reader.int64().toBigInt();
                    break;
                case /* lugo.ShotClock shot_clock */ 5:
                    message.shotClock = ShotClock.internalBinaryRead(reader, reader.uint32(), options, message.shotClock);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameProperties, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 turn = 1; */
        if (message.turn !== 0)
            writer.tag(1, WireType.Varint).uint32(message.turn);
        /* uint32 home_score = 2; */
        if (message.homeScore !== 0)
            writer.tag(2, WireType.Varint).uint32(message.homeScore);
        /* uint32 away_score = 3; */
        if (message.awayScore !== 0)
            writer.tag(3, WireType.Varint).uint32(message.awayScore);
        /* int64 frame_interval = 4; */
        if (message.frameInterval !== 0n)
            writer.tag(4, WireType.Varint).int64(message.frameInterval);
        /* lugo.ShotClock shot_clock = 5; */
        if (message.shotClock)
            ShotClock.internalBinaryWrite(message.shotClock, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.GameProperties
 */
export const GameProperties = new GameProperties$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandResponse$Type extends MessageType<CommandResponse> {
    constructor() {
        super("lugo.CommandResponse", [
            { no: 1, name: "code", kind: "enum", T: () => ["lugo.CommandResponse.StatusCode", CommandResponse_StatusCode] },
            { no: 2, name: "game_snapshot", kind: "message", T: () => GameSnapshot },
            { no: 3, name: "details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandResponse>): CommandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.details = "";
        if (value !== undefined)
            reflectionMergePartial<CommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandResponse): CommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lugo.CommandResponse.StatusCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* lugo.GameSnapshot game_snapshot */ 2:
                    message.gameSnapshot = GameSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.gameSnapshot);
                    break;
                case /* string details */ 3:
                    message.details = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lugo.CommandResponse.StatusCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* lugo.GameSnapshot game_snapshot = 2; */
        if (message.gameSnapshot)
            GameSnapshot.internalBinaryWrite(message.gameSnapshot, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string details = 3; */
        if (message.details !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.details);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.CommandResponse
 */
export const CommandResponse = new CommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeListeningRequest$Type extends MessageType<ResumeListeningRequest> {
    constructor() {
        super("lugo.ResumeListeningRequest", []);
    }
    create(value?: PartialMessage<ResumeListeningRequest>): ResumeListeningRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResumeListeningRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeListeningRequest): ResumeListeningRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeListeningRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.ResumeListeningRequest
 */
export const ResumeListeningRequest = new ResumeListeningRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeListeningResponse$Type extends MessageType<ResumeListeningResponse> {
    constructor() {
        super("lugo.ResumeListeningResponse", []);
    }
    create(value?: PartialMessage<ResumeListeningResponse>): ResumeListeningResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResumeListeningResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeListeningResponse): ResumeListeningResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeListeningResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.ResumeListeningResponse
 */
export const ResumeListeningResponse = new ResumeListeningResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPlayerPositionsRequest$Type extends MessageType<ResetPlayerPositionsRequest> {
    constructor() {
        super("lugo.ResetPlayerPositionsRequest", []);
    }
    create(value?: PartialMessage<ResetPlayerPositionsRequest>): ResetPlayerPositionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetPlayerPositionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPlayerPositionsRequest): ResetPlayerPositionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPlayerPositionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.ResetPlayerPositionsRequest
 */
export const ResetPlayerPositionsRequest = new ResetPlayerPositionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPlayerPositionsResponse$Type extends MessageType<ResetPlayerPositionsResponse> {
    constructor() {
        super("lugo.ResetPlayerPositionsResponse", [
            { no: 1, name: "game_snapshot", kind: "message", T: () => GameSnapshot }
        ]);
    }
    create(value?: PartialMessage<ResetPlayerPositionsResponse>): ResetPlayerPositionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetPlayerPositionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPlayerPositionsResponse): ResetPlayerPositionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lugo.GameSnapshot game_snapshot */ 1:
                    message.gameSnapshot = GameSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.gameSnapshot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPlayerPositionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lugo.GameSnapshot game_snapshot = 1; */
        if (message.gameSnapshot)
            GameSnapshot.internalBinaryWrite(message.gameSnapshot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.ResetPlayerPositionsResponse
 */
export const ResetPlayerPositionsResponse = new ResetPlayerPositionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameSnapshotRequest$Type extends MessageType<GameSnapshotRequest> {
    constructor() {
        super("lugo.GameSnapshotRequest", []);
    }
    create(value?: PartialMessage<GameSnapshotRequest>): GameSnapshotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameSnapshotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameSnapshotRequest): GameSnapshotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameSnapshotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.GameSnapshotRequest
 */
export const GameSnapshotRequest = new GameSnapshotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameSnapshotResponse$Type extends MessageType<GameSnapshotResponse> {
    constructor() {
        super("lugo.GameSnapshotResponse", [
            { no: 1, name: "game_snapshot", kind: "message", T: () => GameSnapshot }
        ]);
    }
    create(value?: PartialMessage<GameSnapshotResponse>): GameSnapshotResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GameSnapshotResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameSnapshotResponse): GameSnapshotResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lugo.GameSnapshot game_snapshot */ 1:
                    message.gameSnapshot = GameSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.gameSnapshot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameSnapshotResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lugo.GameSnapshot game_snapshot = 1; */
        if (message.gameSnapshot)
            GameSnapshot.internalBinaryWrite(message.gameSnapshot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message lugo.GameSnapshotResponse
 */
export const GameSnapshotResponse = new GameSnapshotResponse$Type();
/**
 * @generated ServiceType for protobuf service lugo.Remote
 */
export const Remote = new ServiceType("lugo.Remote", [
    { name: "PauseOrResume", options: {}, I: PauseResumeRequest, O: CommandResponse },
    { name: "NextTurn", options: {}, I: NextTurnRequest, O: CommandResponse },
    { name: "NextOrder", options: {}, I: NextOrderRequest, O: CommandResponse },
    { name: "SetBallProperties", options: {}, I: BallProperties, O: CommandResponse },
    { name: "SetPlayerProperties", options: {}, I: PlayerProperties, O: CommandResponse },
    { name: "SetGameProperties", options: {}, I: GameProperties, O: CommandResponse },
    { name: "ResumeListeningPhase", options: {}, I: ResumeListeningRequest, O: ResumeListeningResponse },
    { name: "ResetPlayerPositions", options: {}, I: ResetPlayerPositionsRequest, O: ResetPlayerPositionsResponse },
    { name: "GetGameSnapshot", options: {}, I: GameSnapshotRequest, O: GameSnapshotResponse }
]);
